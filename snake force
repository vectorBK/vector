import random
import curses
import sys

# initialize curses
s = curses.initscr()
curses.curs_set(0)
curses.noecho()
curses.cbreak()
sh, sw = s.getmaxyx()

# create window
w = curses.newwin(sh, sw, 0, 0)
w.keypad(1)
w.timeout(100)

# initialize game variables
snk_x = sw // 4
snk_y = sh // 2
snake = [
    [snk_y, snk_x],
    [snk_y, snk_x - 1],
    [snk_y, snk_x - 2]
]

food = [sh // 2, sw // 2]
w.addch(food[0], food[1], curses.ACS_PI)

key = curses.KEY_RIGHT

try:
    # main game loop
    while True:
        next_key = w.getch()
        if next_key in [curses.KEY_DOWN, curses.KEY_UP, curses.KEY_LEFT, curses.KEY_RIGHT]:
            key = next_key

        new_head = [snake[0][0], snake[0][1]]

        if key == curses.KEY_DOWN:
            new_head[0] += 1
        if key == curses.KEY_UP:
            new_head[0] -= 1
        if key == curses.KEY_LEFT:
            new_head[1] -= 1
        if key == curses.KEY_RIGHT:
            new_head[1] += 1

        snake.insert(0, new_head)

        if snake[0] == food:
            food = None
            while food is None:
                nf = [
                    random.randint(1, sh - 2) * 2,
                    random.randint(1, sw - 2) * 2
                ]
                food = nf if nf not in snake else None
            w.addch(food[0], food[1], curses.ACS_PI)
        else:
            tail = snake.pop()
            w.addch(tail[0], tail[1], ' ')

        if snake[0][0] in [0, sh - 1] or snake[0][1] in [0, sw - 1] or snake[0] in snake[1:]:
            break

        w.addch(snake[0][0], snake[0][1], curses.ACS_CKBOARD)

finally:
    # reset the terminal to its original state
    curses.echo()
    curses.nocbreak()
    curses.endwin()
    sys.exit()

